name: pharmacy
services:
  client:
    container_name: Client
    build:
      context: .
      dockerfile: client/Dockerfile
    image: pharmacy/client:latest
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]

  api:
    container_name: API_Gateway
    image: nginx:latest
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      client:
          condition: service_healthy
      branches:
          condition: service_healthy
      products:
          condition: service_healthy
    links:
      - branches
      - client
      - products

  database_master:
    image: postgres:alpine
    container_name: master_database
    command: "-c 'config_file=/etc/postgresql/postgresql.conf'"
    restart: always
    volumes:
      - master_data:/var/lib/postgresql/data
      - ./database/data:/docker-entrypoint-initdb.d/
      - ./database/master/11_replication.sql:/docker-entrypoint-initdb.d/11_replication.sql
      - ./database/master/12_data.sql:/docker-entrypoint-initdb.d/12_data.sql
      - ./database/master/postgresql.conf:/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: my_password
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 6s
      retries: 5

  database_slave:
    image: postgres:alpine
    container_name: slave_database
    restart: always
    volumes:
      - save_data:/var/lib/postgresql/data
      - ./database/data:/docker-entrypoint-initdb.d/
      - ./database/slave/11_replication.sql:/docker-entrypoint-initdb.d/11_replication.sql
    ports:
      - "5433:5432"
    environment:
      POSTGRES_PASSWORD: my_password
      POSTGRES_INITDB_ARGS: "--auth-host=md5 --auth-local=md5"
    depends_on:
      database_master:
        condition: service_healthy
    links:
      - database_master

  branches:
    container_name: Branches
    build:
      context: .
      dockerfile: services/branches/Dockerfile
    image: pharmacy/branches:latest
    restart: always
    environment:
      PG_HOST: database_master
      PG_USER: branches_user
      PG_PASSWORD: branches_password
      PG_DBNAME: pharmacy
      IPV4: 0.0.0.0:8080
    depends_on:
      database_master:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
    links:
      - database_master

  products:
    container_name: Products
    build:
      context: .
      dockerfile: services/products/Dockerfile
    image: pharmacy/products:latest
    restart: always
    environment:
      PG_HOST: database_master
      PG_USER: products_user
      PG_PASSWORD: products_password
      PG_DBNAME: pharmacy
      IPV4: 0.0.0.0:8080
    depends_on:
      database_master:
        condition: service_healthy
    healthcheck:
        test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
    links:
      - database_master

volumes:
    master_data:
      name: master_data
    save_data:
        name: save_data